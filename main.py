# Example script to run the random forest classifier

import pickle
import numpy as np
import cv2
import scipy
import os
import matlab.engine
import pandas as pd
import skimage
from skimage import measure
from skimage.measure import regionprops
from skimage.measure import label
import matplotlib.pyplot as plt



# Find bounding box of the ROI from the binary image generated by u-net
def find_ROI(img, mask, window_ratio):
    mask = cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)

    m = skimage.measure.moments(mask)
    cr = m[0, 1] / m[0, 0]
    cc = m[1, 0] / m[0, 0]
    measure.moments_central(mask, cr, cc)
    label_mask = label(mask)

    ROI = []
    Coords = []
    for region in regionprops(label_mask):
        minr, minc, maxr, maxc = region.bbox
        x_length = abs(maxr - minr)
        y_length = abs(maxc - minc)
        x_mid = minr + (x_length / 2)
        y_mid = minc + (y_length / 2)
        if x_length < y_length:
            square_length = np.multiply(y_length, window_ratio)
        else:
            square_length = np.multiply(x_length, window_ratio)

        X_min = int(x_mid - (square_length / 2))
        X_max = int(x_mid + (square_length / 2))
        Y_min = int(y_mid - (square_length / 2))
        Y_max = int(y_mid + (square_length / 2))

        coord = [X_min, X_max, Y_min, Y_max]
        subRegion = np.zeros_like(img)
        subRegion[coord[0]:coord[1], coord[2]:coord[3]] = img[coord[0]:coord[1], coord[2]:coord[3]]
        ROI.append(subRegion)
        Coords.append(coord)
    return ROI, Coords


img = cv2.imread('/Users/apple/Documents/PyCharmProjects/unet/output/32_img.png', 1)
mask = cv2.imread('/Users/apple/Documents/PyCharmProjects/unet/output/32_prd.png', 1)

eng = matlab.engine.start_matlab()
eng.addpath(r'src/', nargout=0)

# Set parallel computing
num_processor = 4
eng.setup_parpool(num_processor, nargout=0)

window_ratio = 1.5  # Set the window size
ROI, Coords = find_ROI(img, mask, window_ratio)
print('ROI Found')

for n in range(len(ROI)):
    ROI[n] = matlab.uint8(ROI[n].tolist())
    ROI[n].reshape((ROI[n].size[0], ROI[n].size[1], 3))

# Display the roi (Can be commented)
# for i in range(len(ROI)):
#     plt.imshow(ROI[i], aspect="auto")
#     plt.show()

# Load the classifier
infile = open('module/RandomForest_deepFeature_new.pkl', 'rb')
RF = pickle.load(infile)
infile.close()
print('Classifier Loaded')

features = eng.extract_deepFeatures(ROI)
print('Feature Extracted')
predict_class = RF.predict(features)
print('Class Predicted by RF')

# Get the tumor region
new_img = np.zeros_like(img)
for i in range(len(predict_class)):
    if predict_class[i] == 1:
        new_img[Coords[i][0]:Coords[i][1],Coords[i][2]:Coords[i][3]] = img[Coords[i][0]:Coords[i][1],Coords[i][2]:Coords[i][3]]

plt.imshow(new_img, aspect="auto")
plt.show()
eng.close_parpool(nargout=0)

### Ignore the following codes

# num_processor = 4
# eng.parpool(num_processor)
# eng.setup_parpool(num_processor, nargout=0)
#
# predict_classes = []
# new_img = np.zeros_like(img)
# for i in range(len(ROI)):
#     features = eng.extract_deepFeatures(ROI[i])
#     predict_class = RF.predict(features)
#     predict_classes.append(predict_class)
#     if predict_class == 1:
#         new_img[Coords[i][0]-50:Coords[i][1]+50, Coords[i][2]-50:Coords[i][3]+50] = img[Coords[i][0]-50:Coords[i][1]+50, Coords[i][2]-50:Coords[i][3]+50]
#
#
# plt.imshow(new_img, aspect="auto")
# plt.show()
#
# eng.close_parpool(nargout=0)













